/* 输入：grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]] 
 * 输出：28
 * 解释：
 * [[1,0,7],
 * [2,0,6],
 * [3,4,5],
 * [0,3,0],
 * [9,0,20]]
 * 一种收集最多黄金的路线是：1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7。
 * 
 * 输入：grid = [[0,6,0],[5,8,7],[0,9,0]]
 * 输出：24
 * 解释：
 * [[0,6,0],
 * [5,8,7],
 * [0,9,0]]
 * 一种收集最多黄金的路线是：9 -> 8 -> 7。
 * 
 * 你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，
 * 并用大小为 m * n 的网格 grid 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；
 * 如果该单元格是空的，那么就是 0。
 *  为了使收益最大化，矿工需要按以下规则来开采黄金：
 * 每当矿工进入一个单元，就会收集该单元格中的所有黄金。
 * 矿工每次可以从当前位置向上下左右四个方向走。
 * 每个单元格只能被开采（进入）一次。
 * 不得开采（进入）黄金数目为 0 的单元格。 
 * 矿工可以从网格中 任意一个 有黄金的单元格出发或者是停止。
 */

class Solution {

vector<vector<int>> is_visited;
int row_len = grid.size();    //行数
int col_len = grig[0].size(); //列数

public:
    int getMaximumGold(vector<vector<int>>& grid) {
        is_pathed = grid;
        is_pathed = is_pathed*(-1); 
        //如果是负数说明没有挖掘过， 正数与0是不能挖的
        //我们对is_visited矩阵进行一圈的填充为0，
        //表示为墙，这样可以降低判断频率，提高程序效率。


        //首先从哪里开始尼？
        // 我们先随便算一个点进入，进行DFS与递归
        // 然后看还有那个金矿没有挖，我们就从这个金矿开始DFS与递归
        // 一直到没有 没挖的金矿。
        backtrack();
    }

    void backtrack(vector<vector<int>> &grid, int col, int row){
        //首先写下终止函数的条件，满足的话把最大值搞出来，然后与后面的最大值进行比较


        //开始四个横向的选择循环 四个选择  如果满足条件，则把这个节点放入到stack中并更新临时最大值。
        //push_back进入一个之后，并且对记录的备忘矩阵进行操作,
        //开始递归backtrack(); 进行DFS 
        //把栈里面的元素pop_back 出来并且临时最大值减去该 元素的值。


    }
};